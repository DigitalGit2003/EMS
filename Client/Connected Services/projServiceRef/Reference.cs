//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.projServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProjectDTO", Namespace="http://schemas.datacontract.org/2004/07/EMS.Models")]
    [System.SerializableAttribute()]
    public partial class ProjectDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="projServiceRef.IProjectService")]
    public interface IProjectService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/getProject", ReplyAction="http://tempuri.org/IProjectService/getProjectResponse")]
        Client.projServiceRef.ProjectDTO getProject(string proj_title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/getProject", ReplyAction="http://tempuri.org/IProjectService/getProjectResponse")]
        System.Threading.Tasks.Task<Client.projServiceRef.ProjectDTO> getProjectAsync(string proj_title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/getProjects", ReplyAction="http://tempuri.org/IProjectService/getProjectsResponse")]
        Client.projServiceRef.ProjectDTO[] getProjects();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/getProjects", ReplyAction="http://tempuri.org/IProjectService/getProjectsResponse")]
        System.Threading.Tasks.Task<Client.projServiceRef.ProjectDTO[]> getProjectsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/getProjectsByDepartmentName", ReplyAction="http://tempuri.org/IProjectService/getProjectsByDepartmentNameResponse")]
        Client.projServiceRef.ProjectDTO[] getProjectsByDepartmentName(string dept_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/getProjectsByDepartmentName", ReplyAction="http://tempuri.org/IProjectService/getProjectsByDepartmentNameResponse")]
        System.Threading.Tasks.Task<Client.projServiceRef.ProjectDTO[]> getProjectsByDepartmentNameAsync(string dept_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/addProject", ReplyAction="http://tempuri.org/IProjectService/addProjectResponse")]
        string addProject(Client.projServiceRef.ProjectDTO dto, string deptName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/addProject", ReplyAction="http://tempuri.org/IProjectService/addProjectResponse")]
        System.Threading.Tasks.Task<string> addProjectAsync(Client.projServiceRef.ProjectDTO dto, string deptName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/updateProject", ReplyAction="http://tempuri.org/IProjectService/updateProjectResponse")]
        string updateProject(string proj_title, Client.projServiceRef.ProjectDTO p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/updateProject", ReplyAction="http://tempuri.org/IProjectService/updateProjectResponse")]
        System.Threading.Tasks.Task<string> updateProjectAsync(string proj_title, Client.projServiceRef.ProjectDTO p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/deleteProject", ReplyAction="http://tempuri.org/IProjectService/deleteProjectResponse")]
        string deleteProject(string proj_title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/deleteProject", ReplyAction="http://tempuri.org/IProjectService/deleteProjectResponse")]
        System.Threading.Tasks.Task<string> deleteProjectAsync(string proj_title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/addEmployees", ReplyAction="http://tempuri.org/IProjectService/addEmployeesResponse")]
        string addEmployees(string proj_title, string[] Emps);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/addEmployees", ReplyAction="http://tempuri.org/IProjectService/addEmployeesResponse")]
        System.Threading.Tasks.Task<string> addEmployeesAsync(string proj_title, string[] Emps);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/viewEmployees", ReplyAction="http://tempuri.org/IProjectService/viewEmployeesResponse")]
        string[] viewEmployees(string proj_title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/viewEmployees", ReplyAction="http://tempuri.org/IProjectService/viewEmployeesResponse")]
        System.Threading.Tasks.Task<string[]> viewEmployeesAsync(string proj_title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/removeEmployeeFromProject", ReplyAction="http://tempuri.org/IProjectService/removeEmployeeFromProjectResponse")]
        string removeEmployeeFromProject(string proj_title, string emp_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/removeEmployeeFromProject", ReplyAction="http://tempuri.org/IProjectService/removeEmployeeFromProjectResponse")]
        System.Threading.Tasks.Task<string> removeEmployeeFromProjectAsync(string proj_title, string emp_name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProjectServiceChannel : Client.projServiceRef.IProjectService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProjectServiceClient : System.ServiceModel.ClientBase<Client.projServiceRef.IProjectService>, Client.projServiceRef.IProjectService {
        
        public ProjectServiceClient() {
        }
        
        public ProjectServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProjectServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProjectServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProjectServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Client.projServiceRef.ProjectDTO getProject(string proj_title) {
            return base.Channel.getProject(proj_title);
        }
        
        public System.Threading.Tasks.Task<Client.projServiceRef.ProjectDTO> getProjectAsync(string proj_title) {
            return base.Channel.getProjectAsync(proj_title);
        }
        
        public Client.projServiceRef.ProjectDTO[] getProjects() {
            return base.Channel.getProjects();
        }
        
        public System.Threading.Tasks.Task<Client.projServiceRef.ProjectDTO[]> getProjectsAsync() {
            return base.Channel.getProjectsAsync();
        }
        
        public Client.projServiceRef.ProjectDTO[] getProjectsByDepartmentName(string dept_name) {
            return base.Channel.getProjectsByDepartmentName(dept_name);
        }
        
        public System.Threading.Tasks.Task<Client.projServiceRef.ProjectDTO[]> getProjectsByDepartmentNameAsync(string dept_name) {
            return base.Channel.getProjectsByDepartmentNameAsync(dept_name);
        }
        
        public string addProject(Client.projServiceRef.ProjectDTO dto, string deptName) {
            return base.Channel.addProject(dto, deptName);
        }
        
        public System.Threading.Tasks.Task<string> addProjectAsync(Client.projServiceRef.ProjectDTO dto, string deptName) {
            return base.Channel.addProjectAsync(dto, deptName);
        }
        
        public string updateProject(string proj_title, Client.projServiceRef.ProjectDTO p) {
            return base.Channel.updateProject(proj_title, p);
        }
        
        public System.Threading.Tasks.Task<string> updateProjectAsync(string proj_title, Client.projServiceRef.ProjectDTO p) {
            return base.Channel.updateProjectAsync(proj_title, p);
        }
        
        public string deleteProject(string proj_title) {
            return base.Channel.deleteProject(proj_title);
        }
        
        public System.Threading.Tasks.Task<string> deleteProjectAsync(string proj_title) {
            return base.Channel.deleteProjectAsync(proj_title);
        }
        
        public string addEmployees(string proj_title, string[] Emps) {
            return base.Channel.addEmployees(proj_title, Emps);
        }
        
        public System.Threading.Tasks.Task<string> addEmployeesAsync(string proj_title, string[] Emps) {
            return base.Channel.addEmployeesAsync(proj_title, Emps);
        }
        
        public string[] viewEmployees(string proj_title) {
            return base.Channel.viewEmployees(proj_title);
        }
        
        public System.Threading.Tasks.Task<string[]> viewEmployeesAsync(string proj_title) {
            return base.Channel.viewEmployeesAsync(proj_title);
        }
        
        public string removeEmployeeFromProject(string proj_title, string emp_name) {
            return base.Channel.removeEmployeeFromProject(proj_title, emp_name);
        }
        
        public System.Threading.Tasks.Task<string> removeEmployeeFromProjectAsync(string proj_title, string emp_name) {
            return base.Channel.removeEmployeeFromProjectAsync(proj_title, emp_name);
        }
    }
}
